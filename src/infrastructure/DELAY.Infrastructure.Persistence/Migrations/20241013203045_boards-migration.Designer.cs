// <auto-generated />
using System;
using DELAY.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DELAY.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DelayContext))]
    [Migration("20241013203045_boards-migration")]
    partial class boardsmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.BoardChatRoomEntity", b =>
                {
                    b.Property<Guid>("BoardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uuid");

                    b.HasKey("BoardId", "ChatRoomId");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("BoardChatRooms", (string)null);
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.BoardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("BoardId");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Boards", (string)null);
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.BoardUserEntity", b =>
                {
                    b.Property<Guid>("BoardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("BoardId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BoardUsers", (string)null);
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.ChatRoomEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ChatRoomId");

                    b.Property<int>("ChatType")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChatRooms", (string)null);
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.ChatRoomUserEntity", b =>
                {
                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("ChatRoomId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatRoomUsers", (string)null);
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.SessionLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("SessionLogId");

                    b.Property<int>("AuthProvider")
                        .HasColumnType("integer");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SessionLogs", (string)null);
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.TicketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("TicketId");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TicketListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TicketListId");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.TicketUserEntity", b =>
                {
                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TicketId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketUsers", (string)null);
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.TicketsListEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("TicketsLists", (string)null);
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.BoardChatRoomEntity", b =>
                {
                    b.HasOne("DELAY.Infrastructure.Persistence.Entities.BoardEntity", "Board")
                        .WithMany("BoardChatRooms")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DELAY.Infrastructure.Persistence.Entities.ChatRoomEntity", "ChatRoom")
                        .WithMany("BoardChatRooms")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.BoardUserEntity", b =>
                {
                    b.HasOne("DELAY.Infrastructure.Persistence.Entities.BoardEntity", "Board")
                        .WithMany("BoardUsers")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DELAY.Infrastructure.Persistence.Entities.UserEntity", "User")
                        .WithMany("BoardUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.ChatRoomUserEntity", b =>
                {
                    b.HasOne("DELAY.Infrastructure.Persistence.Entities.ChatRoomEntity", "ChatRoom")
                        .WithMany("ChatRoomUsers")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DELAY.Infrastructure.Persistence.Entities.UserEntity", "User")
                        .WithMany("ChatRoomUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.SessionLogEntity", b =>
                {
                    b.HasOne("DELAY.Infrastructure.Persistence.Entities.UserEntity", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.TicketEntity", b =>
                {
                    b.HasOne("DELAY.Infrastructure.Persistence.Entities.TicketsListEntity", "TicketList")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketListId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("TicketList");
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.TicketUserEntity", b =>
                {
                    b.HasOne("DELAY.Infrastructure.Persistence.Entities.TicketEntity", "Ticket")
                        .WithMany("Users")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DELAY.Infrastructure.Persistence.Entities.UserEntity", "User")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.TicketsListEntity", b =>
                {
                    b.HasOne("DELAY.Infrastructure.Persistence.Entities.BoardEntity", "Board")
                        .WithMany("TicketsLists")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.BoardEntity", b =>
                {
                    b.Navigation("BoardChatRooms");

                    b.Navigation("BoardUsers");

                    b.Navigation("TicketsLists");
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.ChatRoomEntity", b =>
                {
                    b.Navigation("BoardChatRooms");

                    b.Navigation("ChatRoomUsers");
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.TicketEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.TicketsListEntity", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DELAY.Infrastructure.Persistence.Entities.UserEntity", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("BoardUsers");

                    b.Navigation("ChatRoomUsers");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
